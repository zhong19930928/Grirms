package com.yunhu.yhshxc.nearbyVisit;import gcg.org.debug.JLog;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.json.JSONArray;import org.json.JSONObject;import android.app.Dialog;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.support.v4.app.Fragment;import android.text.TextUtils;import android.text.format.DateUtils;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup.LayoutParams;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.Toast;import com.yunhu.yhshxc.R;import com.yunhu.yhshxc.bo.Func;import com.yunhu.yhshxc.bo.LocationResult;import com.yunhu.yhshxc.database.FuncDB;import com.yunhu.yhshxc.dialog.MyProgressDialog;import com.yunhu.yhshxc.http.GcgHttpClient;import com.yunhu.yhshxc.http.HttpResponseListener;import com.yunhu.yhshxc.location.ReceiveLocationListener;import com.yunhu.yhshxc.location2.LocationFactoy;import com.yunhu.yhshxc.nearbyVisit.bo.NearbyListItem;import com.yunhu.yhshxc.nearbyVisit.bo.NearbyStyle;import com.yunhu.yhshxc.nearbyVisit.comp.AbsNearbyComp;import com.yunhu.yhshxc.nearbyVisit.comp.NearbyCompDate;import com.yunhu.yhshxc.nearbyVisit.comp.NearbyCompDistanceSpinner;import com.yunhu.yhshxc.nearbyVisit.comp.NearbyCompDistanceSpinner.OnLocation;import com.yunhu.yhshxc.nearbyVisit.comp.NearbyCompEdit;import com.yunhu.yhshxc.nearbyVisit.comp.NearbyCompEditRange;import com.yunhu.yhshxc.nearbyVisit.comp.NearbyCompMultipleSpinner;import com.yunhu.yhshxc.nearbyVisit.comp.NearbyCompMultipleSpinner.OnMultiListner;import com.yunhu.yhshxc.nearbyVisit.comp.NearbyCompSpinner;import com.yunhu.yhshxc.nearbyVisit.comp.NearbyCompSpinner.OnSearchListner;import com.yunhu.yhshxc.nearbyVisit.view.NearbyVisitSearchResultItem;import com.yunhu.yhshxc.parser.CacheData;import com.yunhu.yhshxc.utility.PublicUtils;import com.yunhu.yhshxc.utility.SharedPreferencesUtil;import com.yunhu.yhshxc.utility.SharedPreferencesUtilForNearby;import com.yunhu.yhshxc.utility.UrlInfo;import com.yunhu.yhshxc.widget.ToastOrder;import com.yunhu.android.pulltorefresh.library.PullToRefreshBase;import com.yunhu.android.pulltorefresh.library.PullToRefreshBase.Mode;import com.yunhu.android.pulltorefresh.library.PullToRefreshBase.OnRefreshListener;import com.yunhu.android.pulltorefresh.library.PullToRefreshListView;import com.loopj.android.http.RequestParams;public class NearbyVisitSearchResultFragment extends Fragment implements OnItemClickListener,OnLocation,ReceiveLocationListener,OnSearchListner,OnMultiListner{		private final String TAG = "NearbyVisitSearchResultFragment";	private PullToRefreshListView mPullRefreshListView;	private SearchResultAdapter searchResultAdapter;	private NearbyVisitActivity nearbyVisitActivity;	private List<NearbyListItem> nearbyListItemList;	private LinearLayout ll_guanjianzi;	private LinearLayout ll_guanjianzi_content;	private LinearLayout ll_btn_content;	private List<AbsNearbyComp> nearbyCompList;	private boolean isVisibily;	private Context context;	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState) {		context = getActivity();		nearbyListItemList = new ArrayList<NearbyListItem>();		nearbyVisitActivity = (NearbyVisitActivity)this.getActivity();		View view = inflater.inflate(R.layout.nearby_visit_search_result_fragment, null);		searchResultAdapter = new SearchResultAdapter();		mPullRefreshListView = (PullToRefreshListView)view.findViewById(R.id.pull_refresh_list);		mPullRefreshListView.setAdapter(searchResultAdapter);		mPullRefreshListView.setOnItemClickListener(this);		String label = DateUtils.formatDateTime(this.getActivity().getApplicationContext(), System.currentTimeMillis(),				   DateUtils.FORMAT_SHOW_TIME | DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_ABBREV_ALL);		mPullRefreshListView.getLoadingLayoutProxy().setLastUpdatedLabel(label);		mPullRefreshListView.setMode(Mode.PULL_FROM_END);		mPullRefreshListView.setOnRefreshListener(new OnRefreshListener<ListView>() {			@Override			public void onRefresh(PullToRefreshBase<ListView> refreshView) {				if (refreshView.getCurrentMode() == Mode.PULL_FROM_END) {					search(searchParams);				}			}		});		nearbyCompList = new ArrayList<AbsNearbyComp>();		ll_guanjianzi = (LinearLayout) view.findViewById(R.id.ll_guanjianzi);		ll_guanjianzi_content = (LinearLayout) view.findViewById(R.id.ll_guanjianzi_content);		ll_btn_content = (LinearLayout) view.findViewById(R.id.ll_btn_content);//		ll_fanwei = (LinearLayout) view.findViewById(R.id.ll_fanwei);		ll_guanjianzi_content.setVisibility(View.GONE);		ll_guanjianzi.setOnClickListener(listener);		initNearbyDistance(view);		initLeftMenu();						return view;	}	public NearbyCompDistanceSpinner distanceSpinner;	private void initNearbyDistance(View view){		LinearLayout ll = (LinearLayout)view.findViewById(R.id.ll_fanwei);		distanceSpinner = new NearbyCompDistanceSpinner(getActivity(),this);		View distanceView = distanceSpinner.getView();		distanceView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));		ll.addView(distanceView);	}//	public Map<String, String> getSearchInfoMap() {//		Map<String, String> map = new HashMap<String, String>();//		try {//			String ctrl = SharedPreferencesUtilForNearby.getInstance(context).getNearbySearchInfo();//			if (!TextUtils.isEmpty(ctrl)) {//				JSONObject obj = new JSONObject(ctrl);//				Iterator it = obj.keys();//				while (it.hasNext()) {//					String key = String.valueOf(it.next());//					String value = (String) obj.get(key);//					map.put(key, value);//				}//			}//		} catch (Exception e) {//			e.printStackTrace();//		}//		return map;//	}	public void initLeftMenu(){		List<NearbyStyle> styleList = parderNearbyStyle();//		Map<String,String> map = getSearchInfoMap();		if (!styleList.isEmpty()) {			ll_guanjianzi_content.removeAllViews();			if(ll_btn_content.getChildCount()>1){				for (int i = 1; i < ll_btn_content.getChildCount(); i++) {					ll_btn_content.removeViewAt(i);				}			}						nearbyCompList.clear();			for (int i = 0; i < styleList.size(); i++) {				AbsNearbyComp nearbyComp = null;				NearbyStyle style = styleList.get(i);				View view = null;				switch (style.getType()) {				case NearbyStyle.NEARBY_STYLE_EDIT:										nearbyComp = new NearbyCompEdit(getActivity());					view = nearbyComp.getView();//					if(null!=map&&map.containsKey(style.getMark())){//						((NearbyCompEdit) nearbyComp).setValue(map.get(style.getMark()));//					}					break;				case NearbyStyle.NEARBY_STYLE_EDIT_RANGE:					nearbyComp = new NearbyCompEditRange(getActivity());					view = nearbyComp.getView();//					if(null!=map&&map.containsKey(style.getMark()+"_from")){//						((NearbyCompEditRange) nearbyComp).setStartValue(map.get(style.getMark()+"_from"));//					}//					if(null!=map&&map.containsKey(style.getMark()+"_to")){//						((NearbyCompEditRange) nearbyComp).setEndValue(map.get(style.getMark()+"_to"));//					}					break;				case NearbyStyle.NEARBY_STYLE_DATE:					nearbyComp = new NearbyCompDate(getActivity());					view = nearbyComp.getView();//					if(null!=map&&map.containsKey(style.getMark()+"_from")){//						((NearbyCompDate) nearbyComp).setStratTime(map.get(style.getMark()+"_from"));//					}//					if(null!=map&&map.containsKey(style.getMark()+"_to")){//						((NearbyCompDate) nearbyComp).setEndTime(map.get(style.getMark()+"_to"));//					}					break;				default:					break;				}				if (nearbyComp!=null) {					nearbyComp.setNearbyStyle(style,true);					ll_guanjianzi_content.addView(view);					nearbyCompList.add(nearbyComp);				}			}			for (int i = 0; i < styleList.size(); i++) {				AbsNearbyComp nearbyComp = null;				View view = null;								NearbyStyle style = styleList.get(i);				switch (style.getType()) {				case NearbyStyle.NEARBY_STYLE_SPINNER:					nearbyComp = new NearbyCompSpinner(getActivity(),this);					nearbyComp.setNearbyStyle(style,false);					view = nearbyComp.getView();//					if(null!=map&&(map.containsKey(style.getMark()))){//						((NearbyCompSpinner) nearbyComp).setValueSelected(map.get(style.getMark()));//					}					break;				case NearbyStyle.NEARBY_STYLE_MULTI_SPINNER:					nearbyComp = new NearbyCompMultipleSpinner(getActivity(),this);					nearbyComp.setNearbyStyle(style,false);					view = nearbyComp.getView();//					if(null!=map&&map.containsKey(style.getMark())){//						//					}					break;								default:					break;				}				if (nearbyComp!=null) {			        view.setLayoutParams(new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT, 1.0f)); 					ll_btn_content.addView(nearbyComp.getView());					nearbyCompList.add(nearbyComp);				}			}					}		Button button = new Button(getActivity());		button.setText(setString(R.string.nearby_visit_query));		button.setTextSize(14);		button.setTextColor(getResources().getColor(R.color.white));		button.setBackgroundDrawable(getResources().getDrawable(R.drawable.nearby_store_search_btn));		int heightPx = PublicUtils.convertDIP2PX(getActivity(), 35);		button.setHeight(heightPx);		button.setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				search();				isVisibily = false;				ll_guanjianzi_content.setVisibility(View.GONE);				ll_guanjianzi.setVisibility(View.VISIBLE);			}		});		LinearLayout lline = new LinearLayout(getActivity());		lline.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, 10));		ll_guanjianzi_content.addView(lline);		ll_guanjianzi_content.addView(button);	}	public void search(){		if (null!=distanceSpinner&&!TextUtils.isEmpty(distanceSpinner.getValue()) ) {			location();		}else{			String searchParam = searchParam();			if (!"$$".equals(searchParam)) {				if (nearbyVisitActivity!=null) {					nearbyVisitActivity.search(searchParam());				}				}		}	}	private List<NearbyStyle> parderNearbyStyle(){		List<NearbyStyle> list = new ArrayList<NearbyStyle>();		try {			String style = SharedPreferencesUtilForNearby.getInstance(getActivity()).getNearbyStyle(nearbyVisitActivity.menuId);			if (!TextUtils.isEmpty(style)) {				JSONArray array = new JSONArray(style);				NearbyStyle nearbyStyle = null;				for (int i = 0; i < array.length(); i++) {					nearbyStyle = new NearbyStyle();					JSONArray arr = array.getJSONArray(i);					String mark = arr.getString(0);					String name = arr.getString(1);					nearbyStyle.setMark(mark);					nearbyStyle.setName(name);					if ("prop1".equals(mark) || "prop2".equals(mark) || "prop3".equals(mark) || "prop4".equals(mark)) {						nearbyStyle.setType(NearbyStyle.NEARBY_STYLE_EDIT);					}else{//						String funcid = mark.split("_")[1];//						Func func = new FuncDB(context).findFuncByFuncId(Integer.parseInt(funcid));						Func func = new FuncDB(getActivity()).findFuncByFuncId(Integer.parseInt(mark.split("_")[1]));						if (func!=null) {							if (func.getType() == Func.TYPE_EDITCOMP) {								if ((func.getCheckType()!=null && func.getCheckType() == Func.CHECK_TYPE_NUMERIC) || (func.getDataType()!=null &&(func.getDataType() == Func.DATATYPE_BIG_INTEGER || func.getDataType() == Func.DATATYPE_SMALL_INTEGER || func.getDataType() == Func.DATATYPE_DECIMAL))) {									nearbyStyle.setType(NearbyStyle.NEARBY_STYLE_EDIT_RANGE);//如果是数字类型的话就是范围的								}else{									nearbyStyle.setType(NearbyStyle.NEARBY_STYLE_EDIT);								}							}else if(func.getType() == Func.TYPE_SELECTCOMP || func.getType() == Func.TYPE_SELECT_OTHER || func.getType() == Func.TYPE_SINGLE_CHOICE_FUZZY_OTHER_QUERY_COMP ){//不包含组织机构和店面								if (func.getOrgOption()!=null) {									continue;								}								nearbyStyle.setType(NearbyStyle.NEARBY_STYLE_SPINNER);							}else if(func.getType() == Func.TYPE_MULTI_CHOICE_SPINNER_COMP || func.getType() == Func.TYPE_MULTI_CHOICE_FUZZY_QUERY_COMP){								nearbyStyle.setType(NearbyStyle.NEARBY_STYLE_MULTI_SPINNER);							}else if(func.getType() == Func.TYPE_DATEPICKERCOMP){								nearbyStyle.setType(NearbyStyle.NEARBY_STYLE_DATE);							}else{								continue;							}							nearbyStyle.setFunc(func);						}else{							continue;						}					}					list.add(nearbyStyle);				}			}		} catch (Exception e) {			e.printStackTrace();		}		return list;	}    public int pages;//查询列表页数        private String pagesValue(){    	String page = ((pages*20)+","+"20");    	return page;    }    /**     * 刷新     * @param params     */    private String searchParams;    public void refresh(String params){    	pages = 0;    	search(params);    }   // sqlId=187&2=46345783&dataStaus=0&nearby_param={"data_12494":"null","data_9734":"4"}&page=0,20&moduleId=22106    private RequestParams searchParams(String params){    	RequestParams param = new RequestParams();		param.put("nearby_param", params);		param.put("moduleId", nearbyVisitActivity.menuId);		param.put("dataStaus", SharedPreferencesUtilForNearby.getInstance(this.getActivity()).getNearbyDataStatus(String.valueOf(nearbyVisitActivity.menuId)));		param.put("sqlId", SharedPreferencesUtilForNearby.getInstance(getActivity()).getNearbyStoreListSql(nearbyVisitActivity.menuId));		param.put("2", String.valueOf(SharedPreferencesUtil.getInstance(getActivity()).getUserId()));		param.put("page", pagesValue());		if (null!=distanceSpinner&&!TextUtils.isEmpty(distanceSpinner.getLonLat())) {			param.put("dstn", distanceSpinner.getValue());//距离			param.put("lonlat", distanceSpinner.getLonLat());//经纬度		}            		JLog.d(TAG, param.toString());		return param;    }        private Dialog searchDialog;	private void search(String params){		this.searchParams = params;		String url = UrlInfo.queryNearbyVisitDataInfo(getActivity());		RequestParams param = searchParams(params);		GcgHttpClient.getInstance(this.getActivity()).post(url, param, new HttpResponseListener(){			@Override			public void onStart() {				if (pages==0) {					searchDialog  = new MyProgressDialog(NearbyVisitSearchResultFragment.this.getActivity(),R.style.CustomProgressDialog,setString(R.string.nearby_visit_05));					searchDialog.show();				}			}						@Override			public void onSuccess(int statusCode, String content) {				JLog.d(TAG, "onSuccess:"+content);				try {					JSONObject obj = new JSONObject(content);					String resultCode = obj.getString("resultcode");					if ("0000".equals(resultCode)) {						String arrayStr = obj.getString("nearby_data");						if (TextUtils.isEmpty(arrayStr)) {							ToastOrder.makeText(getActivity(), setString(R.string.nearby_visit_09), ToastOrder.LENGTH_SHORT).show();							if (pages == 0) {//说明是刷新								nearbyListItemList.clear();							}							searchResultAdapter.notifyDataSetChanged();						}else{							JSONArray array = obj.getJSONArray("nearby_data");							List<NearbyListItem> newListItem = new CacheData(getActivity()).parserNearbyListItem(array);							if (pages == 0) {//说明是刷新								nearbyListItemList.clear();							}							nearbyListItemList.addAll(newListItem);							searchResultAdapter.notifyDataSetChanged();							pages++;						}					}else{						throw new Exception();					}				} catch (Exception e) {					e.printStackTrace();					if(getActivity()!=null){						ToastOrder.makeText(getActivity(), R.string.ERROR_DATA, ToastOrder.LENGTH_SHORT).show();					}				}			}						@Override			public void onFailure(Throwable error, String content) {				JLog.d(TAG, "onFailure:"+content);				if(getActivity()!=null){					ToastOrder.makeText(getActivity(), R.string.retry_net_exception, ToastOrder.LENGTH_SHORT).show();				}			}						@Override			public void onFinish() {				if (searchDialog!=null && searchDialog.isShowing()) {					searchDialog.dismiss();				}				mPullRefreshListView.onRefreshComplete();			}					});	}		@Override	public void onItemClick(AdapterView<?> parent, View view, int position,long id) {		NearbyListItem item = nearbyListItemList.get(position-1);		searchStoreDetail(item);	}		/**	 * 查询店面详细信息参数	 * @param status等于0的时候传storeid status大于0的时候传patchid	 * @return	 */	private RequestParams searchStoreDetailParams(NearbyListItem item){		RequestParams param = new RequestParams();		param.put("moduleId", nearbyVisitActivity.menuId);		param.put("dataStaus", SharedPreferencesUtilForNearby.getInstance(this.getActivity()).getNearbyDataStatus(String.valueOf(nearbyVisitActivity.menuId)));		param.put("sqlId", SharedPreferencesUtilForNearby.getInstance(getActivity()).getNearbyStoreDetailSql(nearbyVisitActivity.menuId));		param.put("nearby_param", searchParams);		if ("0".equals(SharedPreferencesUtilForNearby.getInstance(getActivity()).getNearbyDataStatus(nearbyVisitActivity.menuId))) {			param.put("1", item.getStoreID());		}else{			param.put("patchId", item.getPatchID());		}		param.put("2", String.valueOf(SharedPreferencesUtil.getInstance(getActivity()).getUserId()));		JLog.d(TAG, param.toString());		return param;	}		/**	 * 查询店面详细信息	 */	private void searchStoreDetail(NearbyListItem item){		final Dialog dialog = new MyProgressDialog(NearbyVisitSearchResultFragment.this.getActivity(),R.style.CustomProgressDialog,setString(R.string.nearby_visit_05));		String url = UrlInfo.queryNearbyVisitDataInfo(getActivity());		RequestParams param = searchStoreDetailParams(item);		GcgHttpClient.getInstance(this.getActivity()).post(url, param, new HttpResponseListener(){			@Override			public void onStart() {				dialog.show();			}						@Override			public void onSuccess(int statusCode, String content) {				JLog.d(TAG, "onSuccess:"+content);				try {					JSONObject obj = new JSONObject(content);					String resultCode = obj.getString("resultcode");					if ("0000".equals(resultCode)) {						String data = obj.getString("nearby_data");						if (!TextUtils.isEmpty(data)) {							Intent intent = new Intent(getActivity(), NearbyVisitStoreDetailActivity.class);							intent.putExtra("storeInfoData", data);							intent.putExtra("menuId", nearbyVisitActivity.menuId);							getActivity().startActivity(intent);						}else{							ToastOrder.makeText(getActivity(), setString(R.string.nearby_visit_11), ToastOrder.LENGTH_SHORT).show();						}					}else{						throw new Exception();					}				} catch (Exception e) {					e.printStackTrace();					ToastOrder.makeText(getActivity(), R.string.ERROR_DATA, ToastOrder.LENGTH_SHORT).show();				}			}						@Override			public void onFailure(Throwable error, String content) {				JLog.d(TAG, "onFailure:"+content);				ToastOrder.makeText(getActivity(), setString(R.string.nearby_visit_12), ToastOrder.LENGTH_SHORT).show();			}						@Override			public void onFinish() {				if (dialog!=null && dialog.isShowing()) {					dialog.dismiss();				}			}					});		}			private class SearchResultAdapter extends BaseAdapter{		@Override		public int getCount() {			return nearbyListItemList.size();		}		@Override		public Object getItem(int position) {			return nearbyListItemList.get(position);		}		@Override		public long getItemId(int position) {			return position;		}		@Override		public View getView(int position, View convertView, ViewGroup parent) {			NearbyVisitSearchResultItem searchResultItem = null;			NearbyListItem item = nearbyListItemList.get(position);			if (convertView == null) {				searchResultItem = new NearbyVisitSearchResultItem(NearbyVisitSearchResultFragment.this.getActivity());				convertView = searchResultItem.getView();				convertView.setTag(searchResultItem);			}else{				searchResultItem = (NearbyVisitSearchResultItem) convertView.getTag();			}			searchResultItem.setData(item);			return convertView;		}			}		private OnClickListener listener = new OnClickListener() {				@Override		public void onClick(View v) {			switch (v.getId()) {			case R.id.ll_guanjianzi:				ll_guanjianzi.setVisibility(View.GONE);//				if(!isVisibily){					ll_guanjianzi_content.setVisibility(View.VISIBLE);//					isVisibily = true;//				}else{//					isVisibily = false;//					ll_guanjianzi_content.setVisibility(View.GONE);//				}				break;			case R.id.ll_fanwei:								break;			default:				break;			}		}	};	@Override	public void startToLocation() {		if (null!=distanceSpinner) {			location();		}	}	private Dialog locationLoadingDialog;	private void location(){		locationLoadingDialog  = new MyProgressDialog(getActivity(),R.style.CustomProgressDialog,setString(R.string.nearby_visit_05));		locationLoadingDialog.show();//		new LocationFactory(context).startNewLocation(this,false);//不需要地址		new LocationFactoy(getActivity(), this).startLocationHH();	}	@Override	public void onReceiveResult(LocationResult result) {		if (locationLoadingDialog!=null && locationLoadingDialog.isShowing()) {			locationLoadingDialog.dismiss();		}		try {			if (result!=null && result.isStatus()) {				String lon = String.valueOf(result.getLongitude());				String lat = String.valueOf(result.getLatitude());				distanceSpinner.setLonLat(lon+","+lat);				JLog.d("就近拜访经纬度"+lon+","+lat);//				search();				String searchParam = searchParam();				if (!"$$".equals(searchParam)) {					if (nearbyVisitActivity!=null) {						nearbyVisitActivity.search(searchParam());					}					}				Toast.makeText(getActivity(), setString(R.string.nearby_visit_08), Toast.LENGTH_SHORT).show();			}else{				Toast.makeText(getActivity(), setString(R.string.nearby_visit_06), Toast.LENGTH_SHORT).show();			}		} catch (Exception e) {			JLog.e(e);			Toast.makeText(getActivity(), setString(R.string.nearby_visit_06), Toast.LENGTH_SHORT).show();		}			}		public String searchParam(){		String paramJson = "";		StringBuffer buf = new StringBuffer();		Map<String, String> param = new HashMap<String, String>();		if (!nearbyCompList.isEmpty()) {			for (int i = 0; i < nearbyCompList.size(); i++) {				AbsNearbyComp comp = nearbyCompList.get(i);				NearbyStyle style = comp.getNearbyStyle();				String value = comp.getValue();				if (!TextUtils.isEmpty(value)) {					if (comp instanceof NearbyCompDate) {//日期类型的验证日期范围						String[] date = value.split("~@@");						String start = date[0];						String end = date[1];						if (start.compareTo(end) == 0) {							param.put(style.getMark(), start);							buf.append(",").append(style.getMark());						}else if(start.compareTo(end) < 0){							param.put(style.getMark()+"_from", start);							param.put(style.getMark()+"_to", end);						}else if(start.compareTo(end) > 0){							Toast.makeText(getActivity(), style.getName()+setString(R.string.nearby_visit_07), Toast.LENGTH_SHORT).show();							return "$$";						}					}else if(comp instanceof NearbyCompEditRange){//范围类型的输入框要验证						NearbyCompEditRange editComp = (NearbyCompEditRange)comp;						String startValue = editComp.startValue();						String endValue = editComp.endValue();						if (!TextUtils.isEmpty(startValue) && !TextUtils.isEmpty(endValue)) {							int start = Integer.parseInt(startValue);							int end = Integer.parseInt(endValue);							if(start > end){								Toast.makeText(getActivity(), style.getName()+setString(R.string.nearby_visit_10), Toast.LENGTH_SHORT).show();								return "$$";							}else if(start == end){								param.put(style.getMark(), startValue);							}else{								param.put(style.getMark()+"_from", startValue);								param.put(style.getMark()+"_to", endValue);							}						}else{							if (!TextUtils.isEmpty(startValue)) {								param.put(style.getMark()+"_from", startValue);							}							if (!TextUtils.isEmpty(endValue)) {								param.put(style.getMark()+"_to", endValue);							}						}											}else{						param.put(style.getMark(), value);					}				}			}		}		paramJson = new JSONObject(param).toString();//		SharedPreferencesUtilForNearby.getInstance(context).saveNearbySearchInfo(paramJson);		return paramJson;	}	@Override	public void startToSearch() {		//spiner 下拉框选择之后开始查询		search();	}	@Override	public void onMultiSearch() {		// TODO Auto-generated method stub		search();	}	public void clearSearchData(){		distanceSpinner.initDistanceData();		initLeftMenu();	}	private String setString(int stringId){		return context.getResources().getString(stringId);	}}